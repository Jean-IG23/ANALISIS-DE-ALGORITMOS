public class MergenSort {
public static void mergeSort(int[] A, int p, int r) {
    if (p < r) {
        int q = (p + r) / 2;
        mergeSort(A, p, q);
        mergeSort(A, q + 1, r);
        merge(A, p, q, r);
    }
}

public static void merge(int[] A, int p, int q, int r) {
    int nL = q - p + 1;
    int nR = r - q;

    int[] L = new int[nL];
    int[] R = new int[nR];

    for (int i = 0; i < nL; i++) {
        L[i] = A[p + i];
    }

    for (int j = 0; j < nR; j++) {
        R[j] = A[q + 1 + j];
    }

    int i = 0, j = 0, k = p;

    while (i < nL && j < nR) {
        if (L[i] <= R[j]) {
            A[k++] = L[i++];
        } else {
            A[k++] = R[j++];
        }
    }

    while (i < nL) {
        A[k++] = L[i++];
    }

    while (j < nR) {
        A[k++] = R[j++];
    }
}

// MÃ©todo principal para probarlo
public static void main(String[] args) {
    int[] A = {2, 5, 8, 3, 6, 7};
    mergeSort(A, 0, A.length - 1);

    // Imprimir el arreglo ordenado
    for (int num : A) {
        System.out.print(num + " ");
    }
}